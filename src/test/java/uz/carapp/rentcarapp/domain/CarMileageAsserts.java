package uz.carapp.rentcarapp.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static uz.carapp.rentcarapp.domain.AssertUtils.bigDecimalCompareTo;

public class CarMileageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarMileageAllPropertiesEquals(CarMileage expected, CarMileage actual) {
        assertCarMileageAutoGeneratedPropertiesEquals(expected, actual);
        assertCarMileageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarMileageAllUpdatablePropertiesEquals(CarMileage expected, CarMileage actual) {
        assertCarMileageUpdatableFieldsEquals(expected, actual);
        assertCarMileageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarMileageAutoGeneratedPropertiesEquals(CarMileage expected, CarMileage actual) {
        assertThat(actual)
            .as("Verify CarMileage auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarMileageUpdatableFieldsEquals(CarMileage expected, CarMileage actual) {
        assertThat(actual)
            .as("Verify CarMileage relevant properties")
            .satisfies(a -> assertThat(a.getValue()).as("check value").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getValue()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarMileageUpdatableRelationshipsEquals(CarMileage expected, CarMileage actual) {
        assertThat(actual)
            .as("Verify CarMileage relationships")
            .satisfies(a -> assertThat(a.getCar()).as("check car").isEqualTo(expected.getCar()));
    }
}
