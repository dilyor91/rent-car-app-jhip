package uz.carapp.rentcarapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MerchantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAllPropertiesEquals(Merchant expected, Merchant actual) {
        assertMerchantAutoGeneratedPropertiesEquals(expected, actual);
        assertMerchantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAllUpdatablePropertiesEquals(Merchant expected, Merchant actual) {
        assertMerchantUpdatableFieldsEquals(expected, actual);
        assertMerchantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAutoGeneratedPropertiesEquals(Merchant expected, Merchant actual) {
        assertThat(actual)
            .as("Verify Merchant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantUpdatableFieldsEquals(Merchant expected, Merchant actual) {
        assertThat(actual)
            .as("Verify Merchant relevant properties")
            .satisfies(a -> assertThat(a.getCompanyName()).as("check companyName").isEqualTo(expected.getCompanyName()))
            .satisfies(a -> assertThat(a.getBrandName()).as("check brandName").isEqualTo(expected.getBrandName()))
            .satisfies(a -> assertThat(a.getInn()).as("check inn").isEqualTo(expected.getInn()))
            .satisfies(a -> assertThat(a.getOwner()).as("check owner").isEqualTo(expected.getOwner()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantUpdatableRelationshipsEquals(Merchant expected, Merchant actual) {
        // empty method
    }
}
